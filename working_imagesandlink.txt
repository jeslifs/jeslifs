import './style.css'
import * as THREE from 'three'
import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js'
import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js'
import { DRACOLoader } from 'three/examples/jsm/loaders/DRACOLoader.js'
import { gsap } from 'gsap'
import * as dat from 'dat.gui'
// import firefliesVertexShader from './shaders/fireflies/vertex.glsl'
// import firefliesFragmentShader from './shaders/fireflies/fragment.glsl'
// console.log(firefliesVertexShader, firefliesFragmentShader);

const parameter = {

}

//  Debug

const gui = new dat.GUI({
    closed: true,
    width: 400
})

// Canvas
const canvas = document.querySelector('canvas.webgl')

// loaders
const loadingBarElement = document.querySelector('.loading-bar')

const loadingManager = new THREE.LoadingManager(

    //loaded
    ()=>
    {
        gsap.delayedCall(0.5, ()=>{
            gsap.to(overlayMaterial.uniforms.uAlpha, {duration: 3, value:0})
            loadingBarElement.classList.add('ended')
            loadingBarElement.style.transform = ''
        })

    },

    //progress
    (itemUrl, itemsLoaded, itemsTotal)=>
    {
        const progressRatio = itemsLoaded / itemsTotal
        loadingBarElement.style.transform = `scaleX(${progressRatio})`
    }

)

// loaders
const gltfLoader = new GLTFLoader(loadingManager)
const textureLoader = new THREE.TextureLoader(loadingManager)
const dracoLoader = new DRACOLoader()
dracoLoader.setDecoderPath('/draco/')
gltfLoader.setDRACOLoader(dracoLoader)

// Scene
const scene = new THREE.Scene()

//overlay
const overlayGeometry = new THREE.PlaneBufferGeometry(2, 2, 1, 1)
const overlayMaterial = new THREE.ShaderMaterial({
    transparent: true,
    uniforms:
    {
        uAlpha: {value: 1}
    },
    vertexShader: `
        void main()
        {
            gl_Position = vec4(position, 1.0);
        }
    `,
    fragmentShader:`
        uniform float uAlpha;

        void main()
        {
            gl_FragColor = vec4(0.0, 0.0, 0.0, uAlpha);
        }
    `
})
const overlay = new THREE.Mesh(overlayGeometry, overlayMaterial)
scene.add(overlay)

// load texture
const bakedTexture1 = textureLoader.load('/textures/night_bake.jpg')
const bakedTexture2 = textureLoader.load('/textures/Van_bake.jpg')
const social = textureLoader.load('/textures/social.jpg')

// console.log(bakedTexture1, bakedTexture2);
bakedTexture1.flipY = false
bakedTexture1.encoding = THREE.sRGBEncoding
bakedTexture2.flipY = false
bakedTexture2.encoding = THREE.sRGBEncoding
social.flipY = false
social.encoding = THREE.sRGBEncoding

// baked material
const bakedMaterial1 = new THREE.MeshBasicMaterial({ map: bakedTexture1 });
const bakedMaterial2 = new THREE.MeshBasicMaterial({ map: bakedTexture2 });
const strings = new THREE.MeshBasicMaterial({ color: '#767676'}) 
const earphoneWire = new THREE.MeshBasicMaterial({ color: '#3E979A'})
const red = new THREE.MeshBasicMaterial({ color: '#ff5349'})
const yellow = new THREE.MeshBasicMaterial({ color: '#f6db16'})
const socialMaterial = new THREE.MeshBasicMaterial({ map: social})
// Group
const mainGroup = new THREE.Group()
const coverGroup = new THREE.Group()
// const monitorGroup = new THREE.Group()

// Room
let bakedRoom, breakingBad
// let objectSeleted = []
gltfLoader.load(
    'model/Room.glb',
    (gltf)=>
    {
        console.log(gltf.scene);
        // objectSeleted = gltf.scene
        // console.log(objectSeleted);
        bakedRoom = gltf.scene.children.find(child => child.name === 'Room')
        bakedRoom.material = bakedMaterial1
        // displaySize = gltf.scene.children.find(child => child.name === 'Monitor_Screen')
        // console.log(displaySize.position);
        // displaySize.position.set(0,0,0)
        // monitorGroup.position.set(-3.5997042655944824
        //     ,
        //     3.3013672828674316
        //     ,
        //     -1.8608882427215576)
        //     monitorGroup.name = 'Monitor_Screen'
        // monitorGroup.add(displaySize)
        // console.log(monitorGroup);

        // const axisHelper = new THREE.AxesHelper()
//         axisHelper.position.set(-3.5997042655944824
//  ,
//             3.3013672828674316
//            ,
//             -1.8608882427215576)
        // mainGroup.add(axisHelper)
        // console.log(displaySize);
        breakingBad = gltf.scene.children.find(child => child.name === 'Breaking_Bad')
        breakingBad.material = bakedMaterial2

        const tyre = gltf.scene.children.find(child => child.name === 'Tyres')
        tyre.material = bakedMaterial2

        const laptopKeys = gltf.scene.children.find(child => child.name === 'Laptop_Keys')
        laptopKeys.material = bakedMaterial2
        
        const mobile = gltf.scene.children.find(child => child.name === 'Mobile')
        mobile.material = bakedMaterial2

        const string = gltf.scene.children.find(child => child.name === 'Strings')
        string.material = strings

        const earphone = gltf.scene.children.find(child => child.name === 'Earphone_Wire')
        earphone.material = earphoneWire

        const Pen_1 = gltf.scene.children.find(child => child.name === 'Pen_1')
        Pen_1.material = earphoneWire
        
        const Pen_2 = gltf.scene.children.find(child => child.name === 'Pen_2')
        Pen_2.material = red

        const Pen_3 = gltf.scene.children.find(child => child.name === 'Pen_3')
        Pen_3.material = earphoneWire

        const Pen_4 = gltf.scene.children.find(child => child.name === 'Pen_4')
        Pen_4.material = yellow

        const num0 = gltf.scene.children.find(child => child.name === 'Num_0')
        num0.material = bakedMaterial1


        const num1 = gltf.scene.children.find(child => child.name === 'Num_1')
        num1.material = bakedMaterial1

        const num2 = gltf.scene.children.find(child => child.name === 'Num_2')
        num2.material = bakedMaterial1

        const num3 = gltf.scene.children.find(child => child.name === 'Num_3')
        num3.material = bakedMaterial1

        const github = gltf.scene.children.find(child => child.name === 'Github')
        github.material = socialMaterial

        const linkedIn = gltf.scene.children.find(child => child.name === 'LinkedIn')
        linkedIn.material = socialMaterial

        const gmail = gltf.scene.children.find(child => child.name === 'Email')
        gmail.material = socialMaterial

        mainGroup.add(gltf.scene)
        // console.log(mainGroup);
    }
)

// Cover
let cover
gltfLoader.load('/model/Blade_Covers.glb',
    (gltf) => {
        // console.log(gltf.scene.children, 'pk');
        cover = gltf.scene.children.find(child => child.name === 'Blade_Cover') 
        cover.material = bakedMaterial1
        // console.log(cover.position, 'cover');
        cover.position.set(0,0,0)
        coverGroup.position.set(
            3.090775489807129,
            3.0487728118896484,
            -2.730968713760376
        )
        coverGroup.add(cover)
    }
)

// Blade
let blade, num = 1
gltfLoader.load('/model/Blades.glb',
    (gltf) => {
        blade = gltf.scene.children.find(child => child.name === 'Blade') 
        blade.material = bakedMaterial1
        // console.log(blade.position, 'blade');
        blade.position.set(
            -0.574481725692749,
            0.0009832382202148438,
            0
        )
        coverGroup.add(blade)
        mainGroup.add(coverGroup)
    }
)

mainGroup.position.set(0, -4, 0)
scene.add(mainGroup)
// gui.add(mainGroup.rotation, 'y').min(-Math.PI).max(Math.PI).step(0.001).name('Rotate')

// Raycaster
const raycaster = new THREE.Raycaster()
const mouse = new THREE.Vector2()



// Gsap
const timeLine = gsap.timeline()
const duration = 3
// const ease = 'power2.inOut'
// const ease = 'none'
let animationFinished = false

// Functions
const monitorImage = textureLoader.load('/textures/About_me.jpg')
monitorImage.flipY = false
monitorImage.encoding = THREE.sRGBEncoding
const displayMon = new THREE.MeshBasicMaterial({ map: monitorImage });

// let previous_use = null

const monitorAnimation = () => {
    if(!animationFinished)
    {
        animationFinished = true
        // console.log(controls.target,controls);
        timeLine.to(controls.target, {
            duration,
            x: -14,
            y: 0,
            z: -2,
            delay: 0.5,
            ease: "power3.inOut",
          });
        //   console.log(controls.target,controls);
          gsap.to(camera.position, {
            duration,
            x:-2,
            y: -0.25,
            z: -1.85,
            delay: 0.5,
            ease: "power3.inOut",
          });
        // console.log('done');
        controls.enabled = false
        // console.log(mouse,monitorImage);
        // if ((mouse.x.toFixed(2) == -0.85 || mouse.x.toFixed(2) == -0.84 || mouse.x.toFixed(2) == 0.95)
        //     && (mouse.y.toFixed(2) == -0.51 || mouse.y.toFixed(2) == -0.80))
        // {
        //     controls.enabled = false
        //     // controls.enabled = true
        //     console.log('woring project');
        //     // laptopAnimation()
        //     window.open("https://github.com/jeslifs", '_blank')
        // }
    }
}

const portfolioImage = textureLoader.load('/textures/portfolio_website.jpg')
portfolioImage.flipY = false
portfolioImage.encoding = THREE.sRGBEncoding

const goanCartImage = textureLoader.load('/textures/GoanCart.jpg')
goanCartImage.flipY = false
goanCartImage.encoding = THREE.sRGBEncoding

const displaylapportfolio = new THREE.MeshBasicMaterial({ map: portfolioImage})
const displaylapgoancart = new THREE.MeshBasicMaterial({ map: goanCartImage });

const projectMaterial = [displaylapportfolio, displaylapgoancart]
let currentProject = 0

const laptopAnimation = () => {
    // if(!animationFinished)
    //     {
    //         animationFinished = true
    //         timeLine.to(controls.target, {
    //             duration,
    //             x: -3,
    //             y: 0,
    //             z: 0,
    //             delay: 1,
    //             ease: "power3.inOut",
    //           });
    //           gsap.to(camera.position, {
    //             duration,
    //             x:-1,
    //             y: 0,
    //             z: -1,
    //             delay: 1,
    //             ease: "power3.inOut",
    //           });
    //     }
    animationFinished = false
    if(!animationFinished)
        {
            animationFinished = true
            timeLine.to(controls.target, {
                duration,
                x: -3.1,
                y: 0,
                z: 0,
                delay: 1,
                ease: "power3.inOut",
              });
              gsap.to(camera.position, {
                duration,
                x:-1.9,
                y: -0.1,
                z: -1,
                delay: 1,
                ease: "power3.inOut",
              });
        }
    controls.enabled = false
}
// points
// const points = [
//     {
//         position: new THREE.Vector3(-6, 0, -1.8608882427215576),
//         element: document.querySelector('.element-0')
//     }]

let roomInteracted = false

const displayMonitor = () => {
    animationFinished = false
    monitorAnimation()
    // previous_use = currentIntersect.object
    currentIntersect.object.material = displayMon
    roomInteracted = true
}

const displayLaptop = () => {
    // console.log("These are few of my projects.");

    laptopAnimation()
    // currentIntersect.object.material = displaylapportfolio
    // currentIntersect.object.material = displaylapgoancart
    // console.log(currentIntersect.object);
    // currentIntersect.object.addEventListener('click', () => {
    //     console.log('clicked event');
    //     // currentProject = (currentProject + 1) % projectMaterial.length
    //     currentIntersect.object.material = projectMaterial[currentProject]
    //     currentProject += 1
    // })

    // currentIntersect.object.addEventListener('touchend', () => {
    //     console.log('toch event');
    //     // currentProject = (currentProject + 1) % projectMaterial.length
    //     console.log(currentProject,'start');
    //     currentIntersect.object.material = projectMaterial[currentProject]
    //     currentProject += 1
    //     console.log(currentProject,'end');
    // })
    // console.log(currentProject,projectMaterial.length);
    if(currentProject == projectMaterial.length)
        currentProject = 0
    else
    {
        currentIntersect.object.material = projectMaterial[currentProject]
        currentIntersect.object.material.needsUpdate = true
        // console.log(projectMaterial[currentProject],currentProject);
        currentProject += 1
    }

    
    
    // animationFinished = false
    // if(!animationFinished)
    //     {
    //         animationFinished = true
    //         timeLine.to(controls.target, {
    //             duration,
    //             x: -3.1,
    //             y: 0,
    //             z: 0,
    //             delay: 1,
    //             ease: "power3.inOut",
    //           });
    //           gsap.to(camera.position, {
    //             duration,
    //             x:-1.9,
    //             y: -0.1,
    //             z: -1,
    //             delay: 1,
    //             ease: "power3.inOut",
    //           });
    //     }

    roomInteracted = true
}

const controlSpeed = (speed) => {
    // console.log(`This is my speed. ${speed}`);
    num = speed
    if(num > 0)
    {
        blade.rotation.needsUpdate = true;
    }
    else
    {
        coverGroup.rotation.needsUpdate = true
        blade.rotation.needsUpdate = true;
    }

}


const displayMobile = () => {
    // console.log("This is my mobile.");
    roomInteracted = true
}

const guitar = () => {
    // console.log("This is my guitar.");
}

const breakingBadVan = () => {
    // console.log("This is yo mr white.");
    alert('bb mf')
}

const linkedIn = () => {
    window.open('https://www.linkedin.com/in/jeslif-fernandes-b19330200/', '_blank')
}

const github = () => {
    window.open('https://github.com/jeslifs', '_blank')
}

const email = () => {
    window.open('mailto:jeslif2020@gmail.com', '_blank')
}
const room = () => {
    // console.log("This is my room.");

    if(roomInteracted === true)
    {
        // previous_use.material.dispose()
        // previous_use.needsUpdate = true
        // console.log(previous_use);
        controls.enabled = true
        controls.target.set(0,0,0)
        camera.position.set(12.5, 5, 12.5) 
        mainGroup.position.set(0, -4, 0)
        mainGroup.needsUpdate = true
        roomInteracted = false
    }

}


// Move Event
window.addEventListener('mousemove', (event) => {
    mouse.x = (event.clientX / window.innerWidth) * 2 - 1
    mouse.y = -(event.clientY / window.innerHeight) * 2 + 1
})


// Click Event
window.addEventListener('click', () =>{
    if(currentIntersect)
    {
        //  Breaking_Bad Num_0 Num_1 Num_2 Num_3 Mobile Plane147 Laptop_Screen Monitor_Screen Strings Tyres
        // console.log(currentIntersect.object.name, 'clicked')

        switch(currentIntersect.object.name)
        {
            case 'Breaking_Bad':
                // console.log('Breaking Bad');
                breakingBadVan()
                break
            
            case 'Tyres':
                // console.log('Tyres');
                breakingBadVan()
                break
            
            case 'Num_0':
                // console.log('Num_0');
                controlSpeed(0)
                break

            case 'Num_1':
                // console.log('Num_1');
                controlSpeed(1)
                break

            case 'Num_2':
                // console.log('Num_2');
                controlSpeed(2)
                break

            case 'Num_3':
                // console.log('Num_3');
                controlSpeed(3)
                break

            case 'Mobile':
                // console.log('Mobile');
                displayMobile()
                break

            case 'Mobile_Screen':
                // console.log('Mobile screen');
                displayMobile()
                break

            case 'Laptop_Screen':
                // console.log('Laptop Screen');
                displayLaptop()
                break

            case 'Monitor_Screen':
                // console.log('Monitor_Screen');
                displayMonitor()
                break

            case 'Strings':
                // console.log('Strings');
                guitar()
                break

            case 'Room':
                // console.log('Room');
                room()
                break

            case 'LinkedIn':
                linkedIn()
                break

            case 'Github':
                github()
                break

            case 'Email':
                email()
                break
        }
    }
})

window.addEventListener("touchstart", (event) => {
    // console.log("touchstart mobile");
    mouse.x = (event.targetTouches[0].clientX / window.innerWidth) * 2 - 1
    mouse.y = -(event.targetTouches[0].clientY / window.innerHeight) * 2 + 1
    // console.log(mouse.x, mouse.y);
})

window.addEventListener("touchend", () => {
    if(currentIntersect)
        {
            // console.log(currentIntersect.object.name,'plp');
            //  Breaking_Bad Num_0 Num_1 Num_2 Num_3 Mobile Plane147 Laptop_Screen Monitor_Screen Strings Tyres
            // console.log(currentIntersect.object.name, 'clicked')
    
            switch(currentIntersect.object.name)
            {
                case 'Breaking_Bad':
                    // console.log('mobile Breaking Bad');
                    breakingBadVan()
                    break
                
                case 'Tyres':
                    // console.log('Tyres');
                    breakingBadVan()
                    break
                
                case 'Num_0':
                    // console.log('Num_0');
                    controlSpeed(0)
                    break
    
                case 'Num_1':
                    // console.log('Num_1');
                    controlSpeed(1)
                    break
    
                case 'Num_2':
                    // console.log('Num_2');
                    controlSpeed(2)
                    break
    
                case 'Num_3':
                    // console.log('Num_3');
                    controlSpeed(3)
                    break
    
                case 'Mobile':
                    // console.log('Mobile');
                    displayMobile()
                    break
    
                case 'Mobile_Screen':
                    // console.log('Mobile screen');
                    displayMobile()
                    break
    
                case 'Laptop_Screen':
                    // console.log('Laptop Screen');
                    displayLaptop()
                    break
    
                case 'Monitor_Screen':
                    // console.log('Monitor_Screen');
                    displayMonitor()
                    break
    
                case 'Strings':
                    // console.log('Strings');
                    guitar()
                    break

                case 'Room':
                    // console.log('Room');
                    room()
                    break

                case 'LinkedIn':
                    linkedIn()
                    break
        
                case 'Github':
                    github()
                    break
        
                case 'Email':
                    email()
                    break
            }
        }
});


// fire flies

// const firefliesGeometry = new THREE.BufferGeometry()
// const firefliesCount = 30
// const positionArray = new Float32Array(firefliesCount * 3)
// const scaleArray = new Float32Array(firefliesCount)



// for (let i=0; i<firefliesCount; i++)
// {
//     positionArray[i * 3 + 0] = (Math.random() - 0.5) * 4
//     positionArray[i * 3 + 1] = Math.random() * 1.5
//     positionArray[i * 3 + 2] = (Math.random() - 0.5) * 4

//     // scalArray[i] = Math.random()

// }
// firefliesGeometry.setAttribute('position', new THREE.BufferAttribute(positionArray, 3))
// firefliesGeometry.setAttribute('aScale', new THREE.BufferAttribute(scaleArray, 1))

// const firefliesMaterial = new THREE.ShaderMaterial({ 
//     uniforms:
//     {
//         uPixelRatio: { value: Math.min(window.devicePixelRatio, 2)},
//         uSize: { value: 100 }
//     },
//     vertexShader: firefliesVertexShader, 
//     fragmentShader: firefliesFragmentShader,
//     // transparent: true,
//     blending: THREE.AdditiveBlending,
//     depthWrite: false,
// })

// gui.add(firefliesMaterial.uniforms.uSize, 'value').min(0).max(500).step(1).name('firefliesSize')
// // points
// const fireflies = new THREE.Points(firefliesGeometry, firefliesMaterial)
// scene.add(fireflies)


// Sizes
const sizes = {
    width: window.innerWidth,
    height: window.innerHeight
}


// Resize
window.addEventListener('resize', () =>
{
    // Update sizes
    sizes.width = window.innerWidth
    sizes.height = window.innerHeight

    // Update camera
    camera.aspect = sizes.width / sizes.height
    camera.updateProjectionMatrix()

    // Update renderer
    renderer.setSize(sizes.width, sizes.height)
    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))

    // update fireflies 
    // firefliesMaterial.uniforms.uPixelRatio.value = Math.min(window.devicePixelRatio, 2)
})

// Camera
const camera = new THREE.PerspectiveCamera(75, sizes.width / sizes.height, 0.1, 100)
camera.position.set(12.5, 5, 12.5) 
scene.add(camera)

// Controls
const controls = new OrbitControls(camera, canvas)
controls.enableDamping = true

// Renderer
const renderer = new THREE.WebGLRenderer({
    canvas: canvas,
    antialias: true
})
renderer.setSize(sizes.width, sizes.height)
renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))
renderer.physicallyCorrectLights = true
renderer.outputEncoding = THREE.sRGBEncoding
// renderer.toneMapping = THREE.ReinhardToneMapping
// renderer.toneMappingExposure = 3
// renderer.shadowMap.enabled = true
// renderer.shadowMap.type = THREE.PCFSoftShadowMap
// parameter.clearColor = '#201919'
parameter.clearColor = '#0b0b0b'
renderer.setClearColor(parameter.clearColor)

//GUI
gui.addColor(parameter, 'clearColor').onChange(()=>
{
    renderer.setClearColor(parameter.clearColor)
})

// parameter.camera.x = 12.5
// parameter.camera.y =  5
// parameter.camera.z = 12.5
gui.add(camera.position, 'x').min(-100).max(900).step(0.5).name('CameraX')
gui.add(camera.position, 'y').min(-100).max(900).step(0.5).name('CameraY')
gui.add(camera.position, 'z').min(-100).max(900).step(0.5).name('CameraZ')
gui.add(controls.target, 'x').min(-100).max(900).step(0.5).name('controlsX')
gui.add(controls.target, 'y').min(-100).max(900).step(0.5).name('controlsY')
gui.add(controls.target, 'z').min(-100).max(900).step(0.5).name('controlsZ')
gui.add(camera.rotation, 'x').min(-100).max(900).step(0.5).name('CamerarotationX')
gui.add(camera.rotation, 'y').min(-100).max(900).step(0.5).name('CamerarotationY')
gui.add(camera.rotation, 'z').min(-100).max(900).step(0.5).name('CamerarotationZ')
//Animate
const clock = new THREE.Clock()

let currentIntersect = null

const tick = () =>
{
    // console.log(camera.position);
    const elapsedTime = clock.getElapsedTime()

    if(cover && blade)
    {

        if(num == 0)
        {
            coverGroup.rotation.y = 0
        }
        else
        {
            coverGroup.rotation.y = Math.sin(elapsedTime * 0.5) * Math.PI / 4
            blade.rotation.x = elapsedTime * 10 * num
        }

        // mainGroup.rotation.y = Math.sin(elapsedTime * 0.05) * Math.PI / 3.5

    }

    if(bakedRoom)
    {
        raycaster.setFromCamera(mouse, camera)
        const intersectionPoint = raycaster.intersectObjects(scene.children, true)

        if(intersectionPoint.length)
        {
            currentIntersect = intersectionPoint[0]
        }
        else
        {
            currentIntersect = null
        }
    }
    
    //Update controls
    controls.update()

    //Render
    renderer.render(scene, camera)

    // Call tick again on the next frame
    window.requestAnimationFrame(tick)
}

tick()